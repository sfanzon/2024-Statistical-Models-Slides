---
title: "Statistical Models"
subtitle: "Lecture 10"
from: markdown+emoji
author: 
    - name: Dr. Silvio Fanzon
      id: sf
      email: S.Fanzon@hull.ac.uk
      url: https://www.silviofanzon.com
      affiliations: University of Hull
    - name: Dr. John Fry
      id: jf
      email: J.M.Fry@hull.ac.uk
      url: https://www.hull.ac.uk/staff-directory/john-fry
      affiliations: University of Hull
---



::: {.content-hidden}
$
{{< include macros.tex >}}
$
:::




# Lecture 10: <br>Practical regression<br>Part 1 {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## Practical regression {.smaller}
### Next 2 classes


- How to do regression in R

- Applications of regression
  * Most examples will be from finance and business

**Side Note:** Regression is very important

- Subject is active field of mathematical research
- Regression plays central role in quantitative research
- Examples of quantitative research are in *finance* and *social sciences*





## Outline of Lecture 10 {.smaller}
### 4 aspects of regression

1. Plotting variables in R  
    * Cross-check formal statistical results with graphical analyses
    * Important in practical research work

<br>

2. Coefficient of determination $R^2$
    * $R^2$ measures proportion of variability in the data explained by the model
    * $R^2$ close to $1$ is good result
    * Any $R^2$ larger than $0.3$ is potentially worthwhile



## Outline of Lecture 10 {.smaller}
### 4 aspects of regression

3. t-test for regression
    * Test the significance of individual parameters

<br>

4. F-test for regression
    * Test the significance of multiple parameters








# Part 1: <br>Plotting variables in R {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## Plotting variables in R {.smaller}


Interested in relationship between 2 variables

- Want to plot the 2 variables together

- Cross-check the results of a formal statistical analysis

- Very important in real project work



## Example: Stock and Gold prices

::: {style="font-size: 0.75em"}
Dataset with $33$ entries for Stock and Gold price pairs
:::


::: {style="font-size: 0.55em"}
```{r}
#| echo: false
#| layout-ncol: 1

data <- read.table("datasets/L3eg1data.txt")

#Add column labels to data
colnames(data) <- c("Stock Price","Gold Price")

# Output markdown table from data
knitr::kable(
  list(data[1:11,], data[12:22,], data[23:33,]),
  row.names = TRUE,
  format = "html", 
  table.attr = 'class="table simple table-striped table-hover"',
) 


```

:::



## Example: Stock and Gold prices {.smaller}


- The data is stored in a ``.txt`` file

- The file can be downloaded here [stock_gold.txt](datasets/stock_gold.txt)

::: {.column width="54%"}

- The text file looks like this
![](images/stock_gold.png){width=73%}

:::

::: {.column width="44%"}

- Remarks:
    * There is a Header
    * 1st column lists *Stock Price*
    * 2nd column lists *Gold Price*

:::



## Reading data into R {.smaller}


To read ``stock_gold.txt`` into R proceed as follows:

1. Download [stock_gold.txt](datasets/stock_gold.txt) and move file to Desktop

2. Open the R Console and change working directory to **Desktop**

```r
# In MacOS type
setwd("~/Desktop")

# In Windows type
setwd("C:/Users/YourUsername/Desktop")
```


## Reading data into R {.smaller}

3. Read ``stock_gold.txt`` into R and store it in data-frame ``prices`` with code

```r
prices = read.table(file = "stock_gold.txt",
                    header = TRUE)
```

<br>

**Note:** We are telling ``read.table()`` that

- ``stock_gold.txt`` has a header
- Headers are *optional*
- Headers are good practice to describe data



## Reading data into R {.smaller}


4. For safety, let us check we loaded the correct data file 


```r
print(prices)
```

```{r}
prices = read.table(file = "datasets/stock_gold.txt",
                    header = TRUE)

print(prices)
```




## Store data into vectors {.smaller}

- We now store Stock and Gold prices in 2 vectors
    * Stock prices are in 1st column of ``prices``
    * Gold prices are in 2nd column of ``prices``

```r
stock.price <- prices[ , 1]
gold.price <- prices[ , 2]
```

<br>

- Alternatively the same can be achieved with

```r
stock.price <- prices$stock_price
gold.price <- prices$gold_price
```



## Plot Stock Price vs Gold Price {.smaller}

::::: {.columns style='display: flex !important; height: 80%;'}

::: {.column width="38%" style='display: flex; justify-content: center; align-items: center;'}



```r
plot(stock.price, 
     gold.price, 
     xlab = "Stock Price", 
     ylab = "Gold Price",
     pch = 16
    )
```

:::

::: {.column width="61%" style='display: flex; justify-content: center; align-items: center;'}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
prices <- read.table(file = "datasets/stock_gold.txt",
                   header = TRUE
                  )

stock.price <- prices$stock_price
gold.price <- prices$gold_price

# Create the plot
plot(stock.price,
     gold.price, 
     xlab = "", 
     ylab= "",
     pch = 16)

# Add labels
mtext("Stock Price", side=1, line=3, cex=2.1)
mtext("Gold Price", side=2, line=2.5, cex=2.1)
```

:::
:::::




## Plot Stock Price vs Gold Price {.smaller}

::::: {.columns style='display: flex !important; height: 80%;'}

::: {.column width="38%" style='display: flex; justify-content: center; align-items: center;'}

- ``xlab`` and ``ylab`` specify axes labels

- ``pch`` specifies type of points

- Scaling is achieved with
    * ``xlim = c(lower, upper)``
    * ``ylim = c(lower, upper)``


:::


::: {.column width="61%" style='display: flex; justify-content: center; align-items: center;'}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
prices <- read.table(file = "datasets/stock_gold.txt",
                   header = TRUE
                  )

stock.price <- prices$stock_price
gold.price <- prices$gold_price

# Create the plot
plot(stock.price,
     gold.price, 
     xlab = "", 
     ylab= "",
     pch = 16)

# Add labels
mtext("Stock Price", side=1, line=3, cex=2.1)
mtext("Gold Price", side=2, line=2.5, cex=2.1)
```

:::
:::::



## Examining the graph {.smaller}

::::: {.columns style='display: flex !important; height: 80%;'}

::: {.column width="38%" style='display: flex; justify-content: center; align-items: center;'}

- Graph suggests that the 2 variables are negatively correlated

- Need to cross-check with the results of a formal statistical regression analysis


:::


::: {.column width="61%" style='display: flex; justify-content: center; align-items: center;'}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
prices <- read.table(file = "datasets/stock_gold.txt",
                   header = TRUE
                  )

stock.price <- prices$stock_price
gold.price <- prices$gold_price

# Create the plot
plot(stock.price,
     gold.price, 
     xlab = "", 
     ylab= "",
     pch = 16)

# Add labels
mtext("Stock Price", side=1, line=3, cex=2.1)
mtext("Gold Price", side=2, line=2.5, cex=2.1)
```

:::
:::::




# Part 2: <br>Coefficient of <br> determination $R^2${background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



## Coefficient of determination $R^2$ {.smaller}

- $R^2$ is defined as

$$
\TSS = \ESS + \RSS 
$$

- $R^2$ measures proportion of variability in the data explained by the model

<br>

::: Important

- $R^2$ is automatically computed by R when using ``lm``
- **High** values of $R^2$ are **better**! 

:::




## Some observations about $R^2$ {.smaller}

::: Warning

$R^2$ increases as more $X$ variables are added to a regression model

:::

This is not necessarily good

- One can add lots of variables and make $R^2 \approx 1$

- This way the model explains the data really well
    $$
    y_i \approx \hat y_i \,, \quad \forall \,\, i = 1 , \ldots, n
    $$ 

- Problem: the model will not make good predictions on new data 

- This is known as **overfitting** and it should be avoided




## Some observations about $R^2$ {.smaller}

- $R^2$ lies between $0$ and $1$
    * $R^2 = 0$ model explains nothing
    * $R^2 = 1$ model explains everything

<br>

- Generally: the higher the value of $R^2$ the better the model
    * Textbook examples often have high values
    $$
    R^2 \geq 0.7
    $$
    * **Example:** In the *Unemployment* example of Lecture 9 we found
    $$
    R^2 = 0.8655401
    $$




## Some observations about $R^2$ {.smaller}



::: Important

In practice values 
$$
R^2 \geq 0.3
$$ 
imply there is a nontrivial amount of variation in the data explained by the model

:::

    
**Example:** In the *Stock Price* Vs *Gold Price* example we have
$$
R^2 = 0.395325
$$ 

- This shows that *Stock Price* affects *Gold Price*
- However, it is clear that also other factors affect *Gold Price*





## Running the regression in R {.smaller}

- The basic R command used to run regression is

::: {.r-stack}

``lm(formula)``

:::

<br>

- ``lm`` stands for **linear model**



## Running simple linear regression in R {.smaller}


For simple linear regression

$$
Y_i = \alpha + \beta x_i + \e_i
$$

the command is

::: {.r-stack}

``lm(y ~ x)``

:::

<br>

- Symbol ``y ~ x`` reads as *$y$ modelled as function of $x$*

- ``y`` is vector containing the data $y_1, \ldots, y_n$

- ``x`` is vector containing the data $x_1, \ldots, x_n$




## Running multiple linear regression in R {.smaller}



For multiple linear regression

$$
Y_i = \beta_1 + \beta_2 \, x_{i2} + \ldots + \beta_p \, x_{ip} + \e_i
$$

the command is 

::: {.r-stack}

``lm (y ~ x2 + x3 + ... + xp)``

:::

<br>

- ``y`` is vector containing the data $y_1, \ldots, y_n$

- ``xj`` is vector containing the data $x_{1j}, \ldots , x_{jp}$ 



## Running the regression in R {.smaller}

The best way to run regression is

1. Run the regression analysis and store the results in a variable

```r
fit.model <- lm(formula)
```

<br>

2. Use command ``summary`` to read output of regression

```r
summary(fit.model)
```

**Note:** If you are running the code from ``.R`` file you need to print output

```r
print( summary(fit.model) )
```




## Example: Stock and Gold prices {.smaller}

- Stock price is stored in vector 
    * ``stock.price``

- Gold price is stored in vector 
    * ``gold.price``


- We want to fit the simple linear model
$$
\text{gold.price } = \alpha + \beta \, \text{ stock.price } + \text{ error}
$$


```r
# Fit simple linear regression model
fit.model <- lm(gold.price ~ stock.price)

# Print result to screen
summary(fit.model)
```


- The full code can be downloaded here [simple_regression.R](codes/simple_regression.R)




## Full output

![](images/simple_regression_output.png){width=70%}



## Interesting parts of Output {.smaller}


![](images/simple_regression_output_cut.png){width=65%}


We are only interested in 3 quantities:


| Coefficient $R^2$ | $\texttt{Multiple R-squared:  0.3953}$ |
|:------------------|:----------                             |
|**t-statistic for** ``stock.price`` | $\texttt{stock.price t-value:  -4.502}$ |
| **F-statistic**      |  $\texttt{F-statistic: 20.27}$           |
: {tbl-colwidths="[50,50]"}



## Conclusion {.smaller}

- We fit a simple linear model to *Stock Price* Vs *Gold Price*

- We obtain coefficient of correlation

$$
R^2 = 0.395325 \geq 0.3
$$ 

- This shows that *Stock Price* affects *Gold Price*

- However, it is clear that also other factors affect *Gold Price*



## t-test and F-test for regression {.smaller}

- From the call of ``lm`` we obtained

| Coefficient $R^2$ | $\texttt{Multiple R-squared:  0.3953}$ |
|:------------------|:----------                             |
|**t-statistic for** ``stock.price`` | $\texttt{stock.price t-value:  -4.502}$ |
| **F-statistic**      |  $\texttt{F-statistic: 20.27}$           |
: {tbl-colwidths="[50,50]"}

<br>

- t-statistic and F-statistic for regression are mathematically **HARD** topic

- In the next two parts we explain what they mean
    * We however omit mathematical details
    * If interested check out Section 11.3 of [@casella-berger]




# Part 3: <br>t-test for regression {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::



# Part 4: <br>F-test for regression {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## Example: Stock and Gold prices {.smaller}


::::: {.columns style='display: flex !important; height: 80%;'}

::: {.column width="38%" style='display: flex; justify-content: center; align-items: center;'}

- We have gold price 

- As Stock price increases, Gold price decreases

- Would like to find $\alpha$ and $\beta$ s.t.
$$
\Expect[Y_i | x_i] \ \approx \  \alpha + \beta x_i
$$




:::


::: {.column width="61%" style='display: flex; justify-content: center; align-items: center;'}

```{r}
#| echo: false
#| fig-asp: 1

# Read the data
prices <- read.table(file = "datasets/stock_gold.txt",
                     header = TRUE
                    )

stock.price <- prices$stock_price
gold.price <- prices$gold_price

# Create the plot
plot(stock.price,
     gold.price, 
     xlab = "", 
     ylab= "",
     pch = 16)

# Add labels
mtext("Stock Price", side=1, line=3, cex=2.1)
mtext("Gold Price", side=2, line=2.5, cex=2.1)

# Fit linear regression
fit <- lm(gold.price ~ stock.price)

# Plot regression line in red
abline(fit, col = "red", lwd = 3)
```

:::

:::::



## References