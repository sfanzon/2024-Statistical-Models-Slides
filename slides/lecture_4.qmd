---
title: "Statistical Models"
subtitle: "Lecture 4"
from: markdown+emoji
author: 
    - name: Dr. Silvio Fanzon
      id: sf
      email: S.Fanzon@hull.ac.uk
      url: https://www.silviofanzon.com
      affiliations: University of Hull
    - name: Dr. John Fry
      id: jf
      email: J.M.Fry@hull.ac.uk
      url: https://www.hull.ac.uk/staff-directory/john-fry
      affiliations: University of Hull
---



::: {.content-hidden}
$
{{< include macros.tex >}}
$
:::




# Lecture 4: <br>Hypothesis testing in R {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





## Outline of Lecture 4

1. t-test
2. R crash course
3. t-test in R
4. F-test in R






# Part 1: <br>t-test {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::


## One-sample Two-sided t-test {.smaller}

**Goal**: estimate the mean $\mu$ of a normal population $N(\mu,\sigma^2)$. If $\mu_0$ is guess for $\mu$
$$
H_0 \colon \mu = \mu_0 \qquad H_1 \colon \mu \neq \mu_0
$$

- **One-sample** means we sample only from one population
- The variance $\sigma$ is unknown
- Suppose the sample size is $n$, with sample $X_1 ,\ldots,X_n$
- We can estimate $\mu$ with the statistics
$$
T = \frac{\overline{X}-\mu}{S/\sqrt{n}}
$$
- Recall: $T \sim t_{n-1}$ Student's t distribution with $n-1$ degrees of freedom







## One-sample Two-sided t-test {.smaller}
### Procedure for all tests

1. Calculation
2. Reference statistical tables or numerical values
3. Interpretation





## One-sample Two-sided t-test {.smaller}
### Calculation

- We have $n$ samples available $x_1,\ldots,x_n$
- Compute **sample mean**
$$
\overline{x} = \frac{1}{n} \sum_{i=1}^n x_i
$$
- Compute the **sample standard deviation**
$$
s = \sqrt{\frac{\sum_{i=1}^n x_i^2 - n \overline{x}^2}{n-1}}
$$




## One-sample Two-sided t-test {.smaller}
### Calculation


- Compute the **estimated standard error**
$$
\ese = \frac{s}{\sqrt{n}}
$$

- Compute the **t-statistic**
$$
t = \frac{\text{estimate } - \text{ hypothesised value}}{\ese}
= \frac{\overline x - \mu_0}{s/\sqrt{n}}
$$

- $\mu_0$ is the value of the null hypothesis $H_0$ 




## One-sample Two-sided t-test {.smaller}
### p-value


- After computing **t-statistic** we need to compute **p-value**

- **p-value** is a measure of how strange the data is in relation to the null hypothesis


- We have 2 options:
    * **LOW** p-value $\quad \implies \quad$  **reject** $H_0$
    * **HIGH** p-value $\quad \implies \quad$  **do not reject** $H_0$

- In this course we reject $H_0$ for p-values 
$$
p<0.05
$$




## One-sample Two-sided t-test {.smaller}
### p-value

- For two-sided t-test the p-value is defined as
$$
p := 2P(t_{n-1}> |t|)
$$
where $t_{n-1}$ is the t distribution with $n-1$ degrees of freedom

- Therefore the p-value is
$$
p = 2P(\text{Observing t }| \, \mu=\mu_0)
$$





## One-sample Two-sided t-test {.smaller}
### p-value

- $p<0.05$ means that the test statistic $t$ is **extreme**: $\,\, P(t_{n-1}> |t|)<0.025$

- In this case $t$ falls in the **grey areas** in the $t_{n-1}$ plot below


```{r}
# Degrees of freedom
df <- 11

# Values for x-axis
x <- seq(-4, 4, length.out = 1000)

# Calculate PDF of t-distribution
pdf <- dt(x, df)

# Plot PDF
plot(x, pdf, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "Density")

# Shade area where p-value < 0.025
x_fill_left <- x[x <= qt(0.025, df)]
y_fill_left <- pdf[x <= qt(0.025, df)]
polygon(c(x_fill_left, rev(x_fill_left)), c(y_fill_left, rep(0, length(y_fill_left))), col = "gray", border = NA)

# Shade area where p-value > 0.975
x_fill_right <- x[x >= qt(0.975, df)]
y_fill_right <- pdf[x >= qt(0.975, df)]
polygon(c(x_fill_right, rev(x_fill_right)), c(y_fill_right, rep(0, length(y_fill_right))), col = "gray", border = NA)

# Add legend
legend("topright", legend = c("p < 0.025", "p > 0.975"), fill = "gray", cex = 1.3)


```






## One-sample Two-sided t-test {.smaller}
### p-value


- How to compute $p$?
    * Use statistical tables -- Available [here](files/Statistics_Tables.pdf)
    * Use R -- next section




## One-sample Two-sided t-test {.smaller}
### Reference statistical tables 


- Tables [here](files/Statistics_Tables.pdf) allow us to **estimate** $p$

- Find the table **One-sided critical values of the student t distribution**
    * Look at the row with Degree of Freedom $n-1$ (or its closest value)
    * Find **critical value** $t^*$ in column $0.025 \qquad\quad$ **Example**: $n=10$, DF $=9$, $t^*=2.262$

![](images/t_test_statistic_table.png){width=82%}





## One-sample Two-sided t-test {.smaller}
### Reference statistical tables 


- The critical value $t^*$ found in the table satisfies
$$
P(t_{n-1}>t^*) = 0.025
$$

- By definition of $p$-value for two-sided t-test we have
$$
p := 2P(t_{n-1}>|t|) 
$$

- Therefore, for $|t|>t^*$
\begin{align*}
p & := 2P(t_{n-1}>|t|) \\
  & <  2P(t_{n-1}>t^*) = 2 \cdot (0.025) = 0.05
\end{align*}

- **Conclusion**: $\qquad |t|>t^* \quad \iff \quad p<0.05$






## One-sample Two-sided t-test {.smaller}
### Interpretation


Recall that $p$ is the probability of observing $t$ given $H_0$
We have two possibilities: 

- $|t|>t^*$
  * In this case $p<0.05$
  * The observed statistic $t$ is very unlikely under $H_0$
  * We **reject** $H_0$


- $|t| \leq t^*$
  * In this case $p>0.05$
  * The observed statistic $t$ is not unlikely under $H_0$
  * We **do not reject** $H_0$




## Example: 2008 crisis {.smaller}

- **Data:** Monthly Consumer Confidence Index (CCI) in 2007 and 2009
- **Question:** Did the crash of 2008 have lasting impact upon CCI?
- **Observation**: Data shows a massive drop in CCI between 2009 and 2007 
- **Method:** Use $t$-test to see if data is sufficient to prove that CCI actually dropped

|CCI                       | J | F | M | A | M | J | J | A | S | O | N | D |
|:------------------------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
| 2007                     |86 | 86| 88| 90| 99| 97| 97| 96| 99| 97| 90| 90|
| 2009                     |24 | 22| 21| 21| 19| 18| 17| 18| 21| 23| 22| 21|
| Difference               |62 | 64| 67| 69| 80| 79| 80| 78| 78| 74| 68| 69|






## Example: 2008 crisis {.smaller}

- This is really a **two-sample** problem -- CCI data in 2 populations: 2007 and 2009 
- It reduces to a **one-sample** problem because we have directly comparable units
- If units cannot be compared, then we must use a two-sample approach
- Two-sample approach will be discussed later


|CCI                       | J | F | M | A | M | J | J | A | S | O | N | D |
|:------------------------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
| 2007                     |86 | 86| 88| 90| 99| 97| 97| 96| 99| 97| 90| 90|
| 2009                     |24 | 22| 21| 21| 19| 18| 17| 18| 21| 23| 22| 21|
| Difference               |62 | 64| 67| 69| 80| 79| 80| 78| 78| 74| 68| 69|




## Example: 2008 crisis {.smaller}
### Setting up the test


- We want to test if there was a change in CCI from 2007 to 2009
- We are really only interested in the difference in CCI
- Let $\mu$ be the (unknown) average difference in CCI
- The **null hypothesis** is that there was (on average) no change in CCI
$$
H_0 \colon \mu = 0 
$$
- The **alternative hypothesis** is that there was some change:
$$
H_1 \colon \mu \neq 0 
$$
- Note that this is a **two-sided** test




## Example: 2008 crisis {.smaller}
### Calculation

Using the available data, we need to compute:

- Sample mean and standard deviation
$$
\overline{x} = \frac{1}{n} \sum_{i=1}^n x_i \qquad 
s = \sqrt{\frac{\sum_{i=1}^n x_i^2 - n \overline{x}^2}{n-1}}
$$

- Test statistic
$$
t = \frac{\overline x - \mu_0}{s/\sqrt{n}}
$$



## Example: 2008 crisis {.smaller}
### Calculation

<br>

|CCI                       | J | F | M | A | M | J | J | A | S | O | N | D |
|:------------------------:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
| Difference               |62 | 64| 67| 69| 80| 79| 80| 78| 78| 74| 68| 69|


\begin{align*}
\overline{x} & =\frac{1}{n} \sum_{i=1}^{n} x_i=\frac{1}{12} \left(62+64+67+{\ldots}+68+69\right)=\frac{868}{12}=72.33 \\
\sum_{i=1}^{n} x_i^2 & = 62^2+64^2+67^2+{\ldots}+68^2+69^2 = 63260 \\
s & = \sqrt{ \frac{\sum_{i=1}^n x_i^2 - n \overline{x}^2}{n-1} } = \sqrt{\frac{63260-12\left(\frac{868}{12}\right)^2}{11}} = \sqrt{\frac{474.666}{11}} = 6.5689
\end{align*}



## Example: 2008 crisis {.smaller}
### Calculation


- The sample size is $n=12$
- The sample mean is $\overline{x}=72.33$
- The sample standard deviation is $s = 6.5689$
- The **hypothesized mean** is $\mu_0 = 0$
- The **t-statistic** is
$$
t = \frac{\overline{x} - \mu_0}{s/\sqrt{n}} =
\frac{72.33 - 0}{6.5689/\sqrt{12}} = 38.145
$$







## Example: 2008 crisis {.smaller}
### Reference statistical tables


Find the [table](files/Statistics_Tables.pdf) **One-sided critical values of the student t distribution**

- Find row with DF $= n-1$ (or closest). Find critical value $t^*$ in column $0.025$
- In our case: $n=12$, DF $=11$, $t^*=2.201$

![](images/t_test_statistic_table_bis.png){width=82%}






## Example: 2008 crisis {.smaller}
### Reference statistical tables

- Plot of $t_{11}$ distribution. White area is $0.95$, shaded area is $0.05$
- Any statistic $|t|>t^* = 2.201$ happens with probability $p<0.025$


```{r}
# Degrees of freedom
df <- 11

# Values for x-axis
x <- seq(-4, 4, length.out = 1000)

# Calculate PDF of t-distribution
pdf <- dt(x, df)

# Plot PDF
plot(x, pdf, type = "l", col = "blue", lwd = 2, xlab = "x", ylab = "Density")

# Shade area where p-value < 0.025
x_fill_left <- x[x <= qt(0.025, df)]
y_fill_left <- pdf[x <= qt(0.025, df)]
polygon(c(x_fill_left, rev(x_fill_left)), c(y_fill_left, rep(0, length(y_fill_left))), col = "gray", border = NA)

# Shade area where p-value > 0.975
x_fill_right <- x[x >= qt(0.975, df)]
y_fill_right <- pdf[x >= qt(0.975, df)]
polygon(c(x_fill_right, rev(x_fill_right)), c(y_fill_right, rep(0, length(y_fill_right))), col = "gray", border = NA)

# Add annotations for p value = 0.025 on both sides
text(qt(0.025, df), dt(qt(0.025, df), df) + 0.05, paste("p = 0.025\n t =", round(qt(0.025, df), 4)), pos = 3, col = "red", cex = 1.3, adj = c(8.5, 4.5))
text(qt(0.975, df), dt(qt(0.975, df), df) + 0.05, paste("p = 0.975\n t =", round(qt(0.975, df), 4)), pos = 3, col = "red", cex = 1.3, adj = c(5.5, 4.5))

# Add legend
legend("topright", legend = c("p < 0.025", "p > 0.975"), fill = "gray", cex = 1.3)


```




## Example: 2008 crisis {.smaller}
### Interpretation

- We have computed:
  * Test statistic $t = 38.145$
  * Critical value $t^* = 2.201$

- Therefore
$$
|t| = 38.145 > 2.201 = t^*
$$

- This implies **rejecting** the null hypothesis
$$
H_0 \colon \mu = 0
$$



## Example: 2008 crisis {.smaller}
### Interpretation

- Therefore the mean difference in CCI is 
$$
\mu \neq 0
$$

- The sample mean difference is positive ($\bar{x}=72.33$) 

- **Conclusions**: 
  * Consumer confidence is higher in 2007 than in 2009
  * The 2008 crash has reduced consumer confidence








# Part 2: <br>R crash course {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::




## What is R? {.smaller}

- R is a *high-level* programming language (like **Python**) 
- This means R deals automatically with some details of computer execution:
  * Memory allocation
  * Resources allocation
- R is focused on manipulating and analyzing data



## References {.smaller}
### For all matters R


::: {.column width=49%"}

- [@dalgaard] Dalgaard, P. 
<br> *Introductory statistics with R*
<br> Second Edition, Springer, 2008   


- [@davies] Davies, T.M.
<br> *The book of R*
<br> No Starch Press, 2016   

:::


::: {.column width="35%"}

**Concise Statistics with R**

<br>

**Comprehensive R manual**

:::





## Installing R {.smaller}

- R is freely available on Windows, Mac OS and Linux
- To install:
  * Download R from CRAN [https://cran.r-project.org](https://cran.r-project.org)
  * Make sure you choose the right version for your system
  * Follow the instructions to install






## How to use R? {.smaller}

- We have installed R. What now?

- The R console can be booted in two ways:
  * Find the **R application** on your machine
  * Open a terminal, type **R**, exectute






## R application {.smaller}
### This is how the R Console looks on the Mac OS app

![](images/R_Console.png){width=82%}



## R from terminal {.smaller}
### This is how the R Console looks on the Mac Terminal

![](images/R_Terminal.png){width=82%}




## What can R do?  {.smaller}

- R Console is waiting for commands
    * Commands can be typed after the symbol ``>``
    * Press ``Enter`` to execute a command





## Example {.smaller}
### Few lines of code can lead to impressive results 

**Example**: Plotting 1000 values randomly generated from normal distribution 

```{r}
#| echo: true
plot(rnorm(1000))
```




## R as a calculator {.smaller}
### R can perform basic mathematical operations

Below you can see R code and the corresponding answer

```{r}
#| echo: true

2 + 2
2 * 3 - 1 + 2 ^ 7
exp(-10)
log(2)
pi
sin(pi/2)

```




## More complex code {.smaller}

- R Console is fine for short codes

- For longer code and function authoring use **R scripts**
  * Write your code in a text editor
  * Save your code to a **plain text** file with ``.txt`` or ``.R`` extension
  * Execute your code in the R Console when you are done

- Examples of text editors
  * TextPad (Windows)
  * TextEdit (MacOS)
  * [VisualStudio Code](https://code.visualstudio.com/docs/languages/r) (Cross platform)




## RStudio {.smaller}

- RStudio is an alternative to R Console and text editors: Download [here](https://posit.co/download/rstudio-desktop/)

- RStudio includes: 
  * Direct-submission code editor
  * Separate point-and-click panes for files, objects, and project management 
  * Creation of markup documents incorporating R code
  





## Working Directory {.smaller}

- R session has a working directory associated with it 
- Unless specified, R will use a **default** working directory
- To check the location of the working directory, use the ``getwd`` function
- On my MacOS system I get $\qquad$
![](images/r_working_directory.png){width=32%}

- File paths are always enclosed in double quotation marks
- Note that R uses **forward slashes** (not backslashes) for paths
- You can change the default working directory using the function ```setwd```

```r
setwd("/folder1/folder2/folder3/")

```

- File path can be relative to current working directory or full (system root drive)




## Working Directory {.smaller}
### RStudio


In RStudio you can set the working directory from the menu bar:

- Session ``->`` Set Working Directory ``->`` Choose Directory




## Comments {.smaller}

- It is good practice to **document** your code
- This means adding comments directly in the code
- Comments should be brief and explain what a chunk of code does
- To insert a comment preface the line with a hash mark ``#``

```{r}
#| echo: true

# This is a comment in R
# Comments are ignored by R

1+1 # This works out the result of one plus one!
```




## Example - Your first R code {.smaller}

1. Open a text editor and copy paste the below code

```r
# This codes sums two numbers and prints result on screen

# Here is a function to sum two numbers

sum_numbers <- function(num1, num2) {
  return(num1 + num2)
}

# Call the function with arguments 2 and 1
# The result of the sum 2 + 1 is stored in result

result <- sum_numbers(2, 1)

# Print the result on screen

print(result)
```



## Example - Your first R code {.smaller}

2. Save to a **plain text** file named either
    * ``my_first_code.R``
    * ``my_first_code.txt``

3. Move this file to **Desktop**

4. Open the R Console and change working directory to **Desktop**

```r
# In MacOS type
setwd("~/Desktop")

# In Windows type
setwd("C:/Users/YourUsername/Desktop")
```



## Example - Your first R code {.smaller}

5. Run your code in the R Console by typying either

```r
my_first_code.R
my_first_code.txt
```

6. You should get the following output

```{r}
# This codes sums two numbers and prints result on screen

# Here is a function to sum two numbers

sum_numbers <- function(num1, num2) {
  return(num1 + num2)
}

# Call the function with arguments 2 and 1
# The result of the sum 2 + 1 is stored in result

result <- sum_numbers(2, 1)

# Print the result on screen

print(result)
```





## R Packages {.smaller}

- The base installation of R comes ready with:
  * Commands for numeric calculations
  * Common statistical analyses
  * Plotting and visualization
  
- More specialized techniques and data sets are contained in **packages** (libraries)


```r
# To install a package run
install.packages("package_name")

# To load a package into your code type
library("package_name")

# To update all the packages intalled type
update.packages()
```





## Help! {.smaller}

- R comes with **help files** that you can use to search for particular functionality
- For example you can check out how to precisely use a given function
- To call for help type ``help(object_name)``


```r
help(mean)
```

![](images/R_help.png){width=62%}




## Further Help {.smaller}

- Sometimes the output of ``help()`` can be cryptic
- You can always search using Google
  * Qualify the search with **R** or the name of an R package
  * Paste an error message -- chances are somebody has already solved your problem
- Even better, there are internet search sites that are specialized for R searches
  * [search.r-project.org](https://search.r-project.org)
  * [Rseek.org](https://rseek.org)




## Exiting R and Saving {.smaller}

To quit the R Console type ``q()``

- You will be asked if you want to save your session
- If you say yes, the session will be saved in a ``.RData`` file in the working directory
- Such file can be loaded later to resume where you left

The above saved session is **irrelevant**:

- You should be writing code in R Scripts
- Code should be save in ``.txt`` or ``.R`` files



## Plotting random numbers {.smaller}

Let us go back to the example of the command 
``plot(rnorm(1000))``

The function ``rnorm(n)`` outputs $n$ randomly generated numbers from $N(0,1)$

```{r}
#| echo: true
rnorm(5)
```

These can then be plotted by concatenating the plot command

```{r}
#| echo: true
#| output-location: slide
plot(rnorm(5))
```

**Note**: 

- The values plotted (next slide) are, for sure, different from the ones listed above

- This is because every time you call ``rnorm(5)`` new values are generated

- We need to **store** the generated values if we want to re-use them



## Assignments {.smaller}

- Values can be stored in **symbolic variables** or **objects**
- To store values into variables we use **assignments**
- The **assignment operator** in R is denoted by ``<-``
- The (single) symbol ``<-`` denotes an arrow pointing to the variable to which the value is assigned



## Assignments {.smaller}
### Example

- To assign the value ``2`` to the variable ``x`` enter ``x <- 2``
- To recover the value in ``x`` just type ``x``

```{r}
#| echo: true
x <- 2
x
```


## Assignments {.smaller}
### Example

- From now on, ``x`` has the value ``2`` 
- The variable ``x`` can be used in subsequent operations
- Such operations do not alter the value of ``x``

```{r}
#| echo: true
x <- 2
x + x
x
```





## Vectors {.smaller}

- We saw how to store a single value in a variable
- Series of values can be stored in **vectors**
- Vectors can be constructed via the command ``c()``

```{r}
#| echo: true

# Constuct a vector and store it in variable "a"

a <- c(60, 72, 57, 90, 95, 72)

# Print vector a

a
```



## Vectorized arithmetic {.smaller}

- A vector is handled by R as a **single** object
- You can do calculations with vectors, as long as they are of the same length

```{r}
#| echo: true

# Constuct two vectors of radius and height of 6 cylinders

radius <- c(6, 7, 5, 9, 9, 7)
height <- c(1.7, 1.8, 1.6, 2, 1, 1.9)

# Compute Volume and store it in "volume"

volume <- pi * radius^2 * height

# Print volume

volume
```

- Notice that operations are exectuted component-wise



## Vectorized arithmetic {.smaller}

- If two vectors do not have the same length then the shorter vector is **cycled**
- This is called **broadcasting**

```{r}
#| echo: true

a <- c(1, 2, 3, 4, 5, 6)
b <- c(0, 1)

a + b
```

- In the example the vector ``a`` has 6 components while ``b`` has 2 components
- The operation ``a+b`` is executed as follows:
  * ``b`` is copied 3 times to match the length of ``a``
  * ``a + b`` is then obtained by summing
  $$
  a + \tilde{b} = (1, 2, 3, 4, 5, 6) + (0, 1, 0, 1, 0, 1) = 
  (1, 3, 3, 5, 5, 7)
  $$


## Vectorized arithmetic {.smaller}

Useful applications of broadcasting are:

- Multiplying a vector by a scalar
- Adding a scalar to each component of a vector

```{r}
#| echo: true

a <- c(1, 2, 3, 4, 5, 6)
b <- 2

# Multuplication by scalar
a * b

# Summing a scalar component-wise
a + b
```



## Sum and length {.smaller}

Two very useful vector operators are:

- ``sum(x)`` which returns the sum of the components of ``x``
- ``length(x)`` which returns the length of ``x``


```{r}
#| echo: true

x <- c(1, 2, 3, 4, 5)
sum(x)
length(x)

```




## Computing sample mean and variance {.smaller}
### Using vectorized operations

Given a vector $\xx = (x_1,\ldots,x_n)$ we want to compute sample mean and variance
$$
\overline{x} = \frac{1}{n} \sum_{i=1}^n x_i \,, \qquad 
s^2 =  \frac{\sum_{i=1}^n (x_i -  \overline{x})^2 }{n-1}  
$$


```r
# Computing sample mean of vector x

xbar = sum(x) / length(x)


# Computing sample variance of vector x

n = length(x)

s2 = sum( (x - barx)^2 ) / (n - 1) 

```



## Computing sample mean and variance {.smaller}
### Using built in functions

- R is a statistical language
- There are built in functions to compute sample mean and variance:
  * ``mean(x)`` computes the sample mean of ``x``
  * ``sd(x)`` computes the sample standard deviation of ``x``
  * ``sd(x)^2`` computes the sample variance of ``x``




## Graphics {.smaller}

- R has extensive built in graphing functions
- Even fancier graphing functions are contained in the library ``ggplot2`` (see [link](https://ggplot2.tidyverse.org))


## Style guide {.smaller}

- Styling your code is optional
- However it is considered good manners to do so
- Good coding style makes code more readable
- Highly recommended, especially for assignments
- The next few slides on Style are based on these two posts:
  * Style Guide by Hadley Wickham ([link](http://adv-r.had.co.nz/Style.html#:~:text=When%20indenting%20your%20code%2C%20use,definition%20runs%20over%20multiple%20lines.))
  * Google's R Style Guide ([link](https://google.github.io/styleguide/Rguide.html))



## Style guide {.smaller}
### File names

They should be meaningful and end in .R

```r
# Good
football-models.R  
utility-functions.R
homework_1.R
homework1.R

# Bad
footballmodels.r # Hard to read
stuff.r          # What is inside this file?
code.r           # Same as above

```


## Style guide {.smaller}
### Objects names

- Objects names shoulde be lowercase
- Use an underscore (``_``) to separate words within a name
- Variable names should be nouns, not verbs
- Come up with names that are concise and meaningful

```r
# Good
day_one  # This will clearly store the value of first day
day_1    # Still clear


# Bad
first_day_of_the_month  # Too long
dayone                  # Hard to read
DayOne                  # Mix of upper and lower case
fdm                     # Hard to guess what this means
```


## Style guide {.smaller}
### Functions names

- Name functions with ``BigCamelCase`` ([link](https://en.wikipedia.org/wiki/Camel_case))
- This is to clearly distinguish functions from other objects
- Functions names should be verbs
- Come up with names that are concise and meaningful

```r
# Good
DoNothing <- function() {
  return(invisible(NULL))
}

# Bad
donothing <- function() {
  return(invisible(NULL))
}
```


## Style guide {.smaller}
### Object and functions names

If possible avoid using names of existing functions and variables


```r
# Bad
T <- FALSE                  # T is reserved for the boolean TRUE
c <- 10                     # c denotes the concatenation operator
mean <- function(x) sum(x)  # mean already denotes a built in function
```



## Style guide {.smaller}
### Assignment

Use ``<-`` and not ``=`` for assignment

```r 
# Good
x <- 5

# Bad
x = 5
```




## Style guide {.smaller}
### Spacing

- Spacing is **really** something you should be careful about
- Place spaces around all infix operators (``=``, ``+``, ``-``, ``<-``, etc.) 
- Place spaces around ``=`` when calling a function 
- Always put a space after a comma, never before (like in regular English)

```r 
# Good
average <- mean(feet / 12 + inches, na.rm = TRUE)

# Bad
average<-mean(feet/12+inches,na.rm=TRUE)
```




## Style guide {.smaller}
### Spacing with Brackets

- Do not place spaces around code in parentheses or square brackets
- Unless there is a comma

```r
# Good
if (condition) do(x)
diamonds[5, ]

# Bad
if ( condition ) do(x)  # No spaces around condition
x[1,]                   # Needs a space after the comma
x[1 ,]                  # Space goes after comma not before
```




## Style guide {.smaller}
### Spacing - Exceptions

- Symbols ``:``, ``::`` and ``:::`` do not need spacing

```r
# Good
x <- 1:10

# Bad
x <- 1 : 10
```

- Place a space before left parentheses, except in a function call

```r
#Good
if (condition) do(x)
plot(x, y)

# Bad
if(condition)do(x)    # (condition) needs spacing
plot (x, y)           # This does not need spacing
```



## Style guide {.smaller}
### Extra Spacing

Extra spacing is ok if it improves alignment of ``=`` or ``<-``

```r
list(
  total = a + b + c, 
  mean  = (a + b + c) / n
)
```



## Style guide {.smaller}
### Curly braces

- An opening curly brace should never go on its own line 
- An opening curly brace should always be followed by a new line
- Always **indent** the code inside curly braces


::: {.column width="45%"}

```r
# Good

if (y < 0 && debug) {
  message("Y is negative")
}

if (y == 0) {
  log(x)
} 
```

:::


::: {.column width="45%"}

```r
# Bad

if (y < 0 && debug)
message("Y is negative")


if (y == 0) 
{
  log(x)} 
```

:::





## Style guide {.smaller}
### Line length

- Limit code to 80 characters per line
- This fits comfortably on a printed page 
- If you run out of room, encapsulate some of the work in separate function




## Style guide {.smaller}
### Indentation

- When indenting your code, use two spaces
- Never use tabs or mix tabs and spaces
- Indentation should be used for **functions**, **if**, **for**, etc.

```r
SumTwoNumbers <- function(x, y) {
  s = x + y
  return(s)
}
```



## Style guide {.smaller}
### Indentation - Exception

If a function definition runs over multiple lines, indent the second line to where the definition starts

```r
long_function_name <- function(a = "a long argument", 
                               b = "another argument",
                               c = "another long argument") {
  # As usual code is indented by two spaces.
}
```


## Style guide {.smaller}
### Use explicit returns

- Functions can return objects
- R has an implicit return feature
- Do not rely on this feature, but explicitly mention ``return(object)``

```r
# Good
AddValues <- function(x, y) {
  return(x + y)                     # Function returns x+y
}

# Bad
AddValues <- function(x, y) {
  x + y                             # Function still returns x+y
}                                   # but it is not immediate to see it
```



## Style guide {.smaller}
### Comments

- **Most importantly**: Comment your code
- Each line of a comment should begin with comment symbol ``#`` and a single space

```r 
# Here we sum two numbers  
x+y
```


- Use commented lines of ``-`` and ``=`` to break up code into easily readable chunks

```r
# Load data ---------------------------

# Plot data ---------------------------
```





## Data {.smaller}


- Just think of R or any other software package as a computer that's too big to fit in your pocket!
$\bullet$ Two basic ways of reading data into R
\begin{enumerate}
\item Directly via the command line for trivial lecture examples
\item Read in using the \texttt{read.table} command via the command line from a .txt file in notepad saved to your USB\\
$\quad$ \textbf{-} Need to be able to write down the filepath. This is usually shortest and easiest if saved to a USB stick\\
$\quad$ \textbf{-} The .txt file that includes the data has to contain equal numbers of evenly spaced columns. This can get a bit fiddly in large problems.
\end{enumerate}






# Part 3: <br>t-test in R {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::





# Part 4: <br>F-test in R {background-color="#cc0164" visibility="uncounted"}

::: footer

<div color="#cc0164">  </div>

:::







## References